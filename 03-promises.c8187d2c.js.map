{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,UAClCC,KAAMF,SAASC,cAAc,UAa/B,SAASE,EAAyBC,EAAQC,EAAMC,GAC9C,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,GAAK,EAC/BC,EAAcD,EAAI,EAAGF,EAAOE,GACzBE,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,EAAAjB,GAASkB,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAyBK,OAAnBJ,EAAQN,EAAW,UAG9DW,OAAM,SAAAP,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,EAAAjB,GAASkB,OAAOI,QACd,sBAAqCF,OAAfL,EAAS,QAAyBK,OAAnBJ,EAAQN,EAAW,UAMlE,SAASE,EAAcG,EAAUC,GAC/B,IAAMO,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEZ,WAAUC,UAEpBY,EAAO,CAAEb,WAAUC,YAEpBA,MApCPd,EAAKC,UAAU2B,iBAAiB,SAEhC,SAA0BC,GACxBA,EAAEC,iBACF,IAAM1B,EAAO,IAAI2B,SAAS/B,EAAKI,MACzBE,EAAS0B,OAAO5B,EAAK6B,IAAI,WACzBzB,EAAawB,OAAO5B,EAAK6B,IAAI,UAC7B1B,EAAOyB,OAAO5B,EAAK6B,IAAI,SAC7BN,WAAWtB,EAA0BG,EAAYF,EAAQC,EAAMC,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  submitBtn: document.querySelector('button'),\n  form: document.querySelector('.form'),\n};\nrefs.submitBtn.addEventListener('click', onSubmitBtnClick);\n\nfunction onSubmitBtnClick(e) {\n  e.preventDefault();\n  const form = new FormData(refs.form);\n  const amount = Number(form.get('amount'));\n  const firstDelay = Number(form.get('delay'));\n  const step = Number(form.get('step'));\n  setTimeout(generateMultiplePromises, firstDelay, amount, step, firstDelay);\n}\n\nfunction generateMultiplePromises(amount, step, firstDelay) {\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i + 1, step * i)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay + firstDelay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay + firstDelay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","submitBtn","document","querySelector","form","$ce04d3a99e08e73b$var$generateMultiplePromises","amount","step","firstDelay","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","delay","$parcel$interopDefault","Notify","success","concat","catch","failure","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","FormData","Number","get"],"version":3,"file":"03-promises.c8187d2c.js.map"}